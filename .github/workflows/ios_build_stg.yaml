name: analyze & test
on:
  workflow_call:
    secrets:
      APPSTORE_CERT_BASE64:
        description: 証明書Base64
        required: true
      APPSTORE_CERT_PASSWORD:
        description: 証明書のパスワード
        required: true
      MOBILEPROVISION_ADHOC_BASE64:
        description: プロビジョニングプロファイル(Adhoc)
        required: true
      KEYCHAIN_PASSWORD:
        description: 一時的なKeychainのパスワード
        required: true
      FIREBASE_PROJ_DEV_NAME:
        description: プロジェクトID
        required: true
      FIREBASE_AUTH_TOKEN:
        description: Firebaseのトークン
        required: true
      FIREBASE_DEV_IOS_ID:
        description: FirebaseのiOS ID
        required: true
      FIREBASE_DEV_TOKEN:
        description: FirebaseのJson Token
        required: true
      EXPORT_OPTIONS:
        description: Export Options
        required: true
jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_CERT_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MOBILEPROVISION_ADHOC_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Flutter get
        uses: subosito/flutter-action@v1
        with:
          channel: stable
          flutter-version: "3.27.0"
      - name: Setup packages
        run: |
          flutter pub get
          dart run build_runner build -d
      - name: Setup Firebase Project
        env:
          FIREBASE_PROJ_DEV_NAME: ${{ secrets.FIREBASE_PROJ_DEV_NAME }}
          FIREBASE_AUTH_TOKEN: ${{ secrets.FIREBASE_AUTH_TOKEN }}
        run: |
          curl -sL https://firebase.tools | bash
          dart pub global activate flutterfire_cli
          flutterfire configure -p $FIREBASE_PROJ_DEV_NAME -y --platforms "ios, android" -i "com.studiomk.flutterSample" -a "com.studiomk.flutter_sample" -m "com.example.example-app"  -w "1:XXX:web:YYY" -x "1:XXX:web:YYY" -t $FIREBASE_AUTH_TOKEN -f > null
      - name: Building IPA
        env:
          EXPORT_OPTIONS: ${{ secrets.EXPORT_OPTIONS }}
        run: |
          echo $EXPORT_OPTIONS > ios/Runner/ExportOptions.plist
          flutter build ipa --release
      - name: Find IPA file
        run: find build/ios -name "*.ipa"
      - name: collect ipa artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-ipa
          path: build/ios/ipa/*.ipa
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
  release:
    name: Release ipa to Firebase
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get release-ipa from artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-ipa
      - name: Upload artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{secrets.FIREBASE_DEV_IOS_ID}}
          serviceCredentialsFileContent: ${{secrets.FIREBASE_DEV_TOKEN}}
          groups: sample
          file: pedometer_app.ipa
          releaseNotes: $GITHUB_REF_NAME
